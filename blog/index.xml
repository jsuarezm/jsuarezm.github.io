<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blog-rsses on Jesús A. Suárez</title>
    <link>http://jsuarezm.github.io/blog/index.xml</link>
    <description>Recent content in Blog-rsses on Jesús A. Suárez</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 15 Oct 2016 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://jsuarezm.github.io/blog/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Tear down the Wall!</title>
      <link>http://jsuarezm.github.io/blog/Tear%20down%20the%20wall%20-%20the%20DevOps%20roadmap/</link>
      <pubDate>Sat, 15 Oct 2016 00:00:00 +0000</pubDate>
      
      <guid>http://jsuarezm.github.io/blog/Tear%20down%20the%20wall%20-%20the%20DevOps%20roadmap/</guid>
      <description>

&lt;h1 id=&#34;tear-down-the-wall&#34;&gt;Tear down the Wall!&lt;/h1&gt;

&lt;p&gt;Regarding DevOps, the techies start looking for all the tools, we want to play with all the toys, it doesn&amp;rsquo;t matter if they are necessary or not. Some kind of manager want to be recognized by the umbrella of the new buzzword and start buying the DevOps tool or creating the DevOps Department, hiring DevOps Engineers.&lt;br /&gt;
But the real motivation why we are considering DevOps is because we simply want to improve or to deal with a problem, to change.&lt;/p&gt;

&lt;h2 id=&#34;what-is-devops&#34;&gt;What is DevOps?&lt;/h2&gt;

&lt;p&gt;According Wikipedia:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&amp;ldquo;&lt;strong&gt;Devops&lt;/strong&gt; (a clipped compound of development and operations) is a culture, movement or practice that emphasizes the collaboration and communication of both software developers and other information  technology (IT) professionals while automating the process of software delivery and infrastructure changes&amp;rdquo;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Gene Kim define DevOps as:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&amp;ldquo;&lt;strong&gt;DevOps&lt;/strong&gt; refers to the emerging professional  movement that advocates a collaborative working relationship between Development and IT Operations, resulting in the fast flow of planned work (i.e., high deploy rates), while simultaneously increasing reliability, stability, resilience of the production environment&amp;rdquo;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;pathology-of-a-dysfunctional-it&#34;&gt;Pathology of a dysfunctional IT&lt;/h2&gt;

&lt;p&gt;The activities inside IT are performed by many groups of professionals, but as all activities require to perform cross-functional touch points to develop and deliver the products and services expected by the clients. When those groups haven&amp;rsquo;t got a real communication neither collaboration between them, we have a dysfunction in the coordination of the activities. Although each group try to reach an excellent performance, they will put in risk the outputs of the whole activities because the lack of coordination and agreement. We can detect this dysfunctional behavior when we frequently meet the &amp;ldquo;them-us&amp;rdquo; culture in each group. Other symptom is the passionate defense of their particular results and the blame to the other group. In this context we have a group of Developers blaming to IT Operators, and viceversa.
These dysfunctional behaviors evidence a conflict between the groups that the company needs to overcome to reach the quality expected in its products and services. Each group need to learn to work as one unique &lt;strong&gt;Team&lt;/strong&gt;.&lt;/p&gt;

&lt;h2 id=&#34;the-roadmap&#34;&gt;The Roadmap&lt;/h2&gt;

&lt;h3 id=&#34;1-tear-down-the-wall&#34;&gt;1. Tear down the wall&lt;/h3&gt;

&lt;p&gt;A successful implementation of DevOps require to be treated as a &lt;strong&gt;cultural change rather a technological change&lt;/strong&gt;. In some cases this change is like a &lt;strong&gt;peace negotiation&lt;/strong&gt;. As all cultural change it is necessary start assembling a tiny cross functional team (Developers and IT Operators together), where each individual has the willing to change.
The commitment of this team to sustain a sane conversation, without blaming, is key to overcome the conflicts. The team have the responsibility to identify and justify the need of change, rationalize the root causes of their problems, sharing and converging to a clear vision. If the level of conflictivity is too high, would be necessary to get an external mediator with the experience in conflict management.
With a clear vision is time to convince to one sponsor looking for a top management support in this change initiative. It is necessary to note at this time there are not a proposal, only good intentions to look for solutions. The initial proposal should be the development of one strategy for improvement.&lt;/p&gt;

&lt;h3 id=&#34;2-the-strategic-thinking-approach&#34;&gt;2. The strategic thinking approach&lt;/h3&gt;

&lt;p&gt;Plan a strategy require a &lt;strong&gt;holistic vision&lt;/strong&gt; of the workflow. DevOps foundations come from &lt;strong&gt;Agile and Lean&lt;/strong&gt;, so perform a stream Value mapping is the best approach to start this stage.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Value stream mapping&lt;/strong&gt; is a lean-management method for analyzing the current state and designing a future state for the series of events that take a product or service from its beginning through to the customer. At Toyota, it is known as &amp;ldquo;material and information flow mapping&amp;rdquo;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;So the first is to list the internal clients and someone who understand the external client.&lt;/li&gt;
&lt;li&gt;Invite your clients (no more than nine in the meeting) and list the activities that integrate the workflow since the request for the product or service performed by the external client until the delivery of good of service to the customer. This is a &lt;strong&gt;client-centric&lt;/strong&gt; workflow. Consider to use a collaborative tool.&lt;/li&gt;
&lt;li&gt;Then it is possible to detail a little the characteristic of each activity and who is the responsible for each one.&lt;/li&gt;
&lt;li&gt;Validate with your clients what it is wrong with the products and service, what they thing is necessary to do, how you can improve, quality, lead time, what would be most value, etc.&lt;/li&gt;
&lt;li&gt;Map each issue gathered with the activity or activities that possibly cause the problem or with the valuables to be improved.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;With this assessment it is possible to have a sense of what is the priority and what part of the whole process require improvement and get a best understanding of the whole business and how the conflict is impacting it.&lt;/p&gt;

&lt;h3 id=&#34;3-slicing-the-monolith&#34;&gt;3. Slicing the Monolith&lt;/h3&gt;

&lt;p&gt;The formulation of the strategy also require to review the enterprise and software architecture looking the level of maintainability of their components, in special the software components. The vision is to reach a fluid and smooth release process where it is possible to do frequently, little changes to minimize the risk associated with the changes. However this vision can be titanic if we have a &amp;ldquo;monolithic software&amp;rdquo;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;A software system is called &amp;ldquo;monolithic&amp;rdquo; if it has a monolithic architecture, in which functionally distinguishable aspects (for example data input and output, data processing, error handling, and the user interface), are not architecturally separate components but are all interwoven.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;It is hard, but not imposible to maintain the monolithic code in a sustainable way. Nevertheless, modularize the functions, keep the things simples, a good distribution of the work and responsibilities, apply assertions and testing, and automation of the task, are key for the maintainability of the code. These techniques are called &lt;strong&gt;refactoring&lt;/strong&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Code &lt;strong&gt;refactoring&lt;/strong&gt; is the process of restructuring existing computer code—changing the factoring—without changing its external behavior. Refactoring improves nonfunctional attributes of the software.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;4-design-the-pipeline&#34;&gt;4. Design the pipeline&lt;/h3&gt;

&lt;p&gt;A pipeline is like a production line into a factory. The principles that lead the pipeline are: end to end visibility, feedback (collaboration) and automation.
There are a least two macro-processes to implement into a pipeline: Continuous Integration and Continuous Delivery.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Continuous Integration (CI)&lt;/strong&gt; is a development practice that requires developers to &lt;strong&gt;integrate&lt;/strong&gt; code into a shared repository several times a day. Each check-in is then verified by an automated build, allowing teams to detect problems early.
 &lt;strong&gt;Continuous delivery (CD)&lt;/strong&gt; is a software engineering approach in which teams produce software in short cycles, ensuring that the software can be reliably released at any time. It aims at building, testing, and releasing software faster and more frequently.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;One of the more important components is the Source Code Management/Version Control(Git, Mercurial, SVN) to implement a workflow for the integration of new code into the develop. The definition of a workspace is also important, nowadays is possible to develop into an environment similar to production using virtualization or containers. Continuous integration tool as Jenkins can automatize the test and the build of the new changes. Automatize the deployment to production environments with tools as puppet, chef or ansible. Finally tools for log management and network monitoring systems are very recommended.&lt;/p&gt;

&lt;h3 id=&#34;5-breathe-one-at-the-time-few-is-much&#34;&gt;5. Breathe, one at the time, few is much&lt;/h3&gt;

&lt;p&gt;Take it easy! Although there are a lot of tools to use, it is not recommendable to use them all at same time. Take always in consideration that the team require time to be comfortable with each one. The culture is first.&lt;/p&gt;

&lt;h3 id=&#34;6-always-measure-always-learn&#34;&gt;6. Always measure, always learn!&lt;/h3&gt;

&lt;p&gt;Always keep the communication and discussion with the team on each stage, taking feedback, learning from mistakes, and fixing and improving with the time. As Agile approach is recommended frequently retrospectives to gather the feedback.&lt;/p&gt;

&lt;p&gt;The Devops implementation bring many benefits in the development and deliver of products and services. This implementation can be hard and tending to fail if lacks of good plan. Implementation based only on tools are destined to fail, therefore it is required to consider the adaptation and acceptance of the Team.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>